/*
 * This file is generated by jOOQ.
 */
package sport_mate_inc.sport_mate_business_layer.tables;


import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import sport_mate_inc.sport_mate_business_layer.DefaultSchema;
import sport_mate_inc.sport_mate_business_layer.tables.records.MessaggiorgfinRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Messaggiorgfin extends TableImpl<MessaggiorgfinRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>MessaggiOrgFin</code>
     */
    public static final Messaggiorgfin MESSAGGIORGFIN = new Messaggiorgfin();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MessaggiorgfinRecord> getRecordType() {
        return MessaggiorgfinRecord.class;
    }

    /**
     * The column <code>MessaggiOrgFin.idMessaggio</code>.
     */
    public final TableField<MessaggiorgfinRecord, Integer> IDMESSAGGIO = createField(DSL.name("idMessaggio"), SQLDataType.INTEGER.identity(true), this, "");

    /**
     * The column <code>MessaggiOrgFin.stato</code>.
     */
    public final TableField<MessaggiorgfinRecord, Integer> STATO = createField(DSL.name("stato"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>MessaggiOrgFin.testo</code>.
     */
    public final TableField<MessaggiorgfinRecord, String> TESTO = createField(DSL.name("testo"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>MessaggiOrgFin.dataOra</code>.
     */
    public final TableField<MessaggiorgfinRecord, String> DATAORA = createField(DSL.name("dataOra"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>MessaggiOrgFin.idOrganizzatore</code>.
     */
    public final TableField<MessaggiorgfinRecord, Integer> IDORGANIZZATORE = createField(DSL.name("idOrganizzatore"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>MessaggiOrgFin.idUtenteFinale</code>.
     */
    public final TableField<MessaggiorgfinRecord, Integer> IDUTENTEFINALE = createField(DSL.name("idUtenteFinale"), SQLDataType.INTEGER.nullable(false), this, "");

    private Messaggiorgfin(Name alias, Table<MessaggiorgfinRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Messaggiorgfin(Name alias, Table<MessaggiorgfinRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>MessaggiOrgFin</code> table reference
     */
    public Messaggiorgfin(String alias) {
        this(DSL.name(alias), MESSAGGIORGFIN);
    }

    /**
     * Create an aliased <code>MessaggiOrgFin</code> table reference
     */
    public Messaggiorgfin(Name alias) {
        this(alias, MESSAGGIORGFIN);
    }

    /**
     * Create a <code>MessaggiOrgFin</code> table reference
     */
    public Messaggiorgfin() {
        this(DSL.name("MessaggiOrgFin"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<MessaggiorgfinRecord, Integer> getIdentity() {
        return (Identity<MessaggiorgfinRecord, Integer>) super.getIdentity();
    }

    @Override
    public Messaggiorgfin as(String alias) {
        return new Messaggiorgfin(DSL.name(alias), this);
    }

    @Override
    public Messaggiorgfin as(Name alias) {
        return new Messaggiorgfin(alias, this);
    }

    @Override
    public Messaggiorgfin as(Table<?> alias) {
        return new Messaggiorgfin(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Messaggiorgfin rename(String name) {
        return new Messaggiorgfin(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Messaggiorgfin rename(Name name) {
        return new Messaggiorgfin(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Messaggiorgfin rename(Table<?> name) {
        return new Messaggiorgfin(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Messaggiorgfin where(Condition condition) {
        return new Messaggiorgfin(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Messaggiorgfin where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Messaggiorgfin where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Messaggiorgfin where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Messaggiorgfin where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Messaggiorgfin where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Messaggiorgfin where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Messaggiorgfin where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Messaggiorgfin whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Messaggiorgfin whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
