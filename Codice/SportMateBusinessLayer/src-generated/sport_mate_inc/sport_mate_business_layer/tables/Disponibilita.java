/*
 * This file is generated by jOOQ.
 */
package sport_mate_inc.sport_mate_business_layer.tables;


import java.math.BigDecimal;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import sport_mate_inc.sport_mate_business_layer.DefaultSchema;
import sport_mate_inc.sport_mate_business_layer.tables.records.DisponibilitaRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Disponibilita extends TableImpl<DisponibilitaRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>Disponibilita</code>
     */
    public static final Disponibilita DISPONIBILITA = new Disponibilita();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DisponibilitaRecord> getRecordType() {
        return DisponibilitaRecord.class;
    }

    /**
     * The column <code>Disponibilita.idDisponibilita</code>.
     */
    public final TableField<DisponibilitaRecord, Integer> IDDISPONIBILITA = createField(DSL.name("idDisponibilita"), SQLDataType.INTEGER.identity(true), this, "");

    /**
     * The column <code>Disponibilita.dataOra</code>.
     */
    public final TableField<DisponibilitaRecord, String> DATAORA = createField(DSL.name("dataOra"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>Disponibilita.prezzo</code>.
     */
    public final TableField<DisponibilitaRecord, BigDecimal> PREZZO = createField(DSL.name("prezzo"), SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>Disponibilita.tipoCampo</code>.
     */
    public final TableField<DisponibilitaRecord, Integer> TIPOCAMPO = createField(DSL.name("tipoCampo"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Disponibilita.idCentro</code>.
     */
    public final TableField<DisponibilitaRecord, Integer> IDCENTRO = createField(DSL.name("idCentro"), SQLDataType.INTEGER.nullable(false), this, "");

    private Disponibilita(Name alias, Table<DisponibilitaRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Disponibilita(Name alias, Table<DisponibilitaRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>Disponibilita</code> table reference
     */
    public Disponibilita(String alias) {
        this(DSL.name(alias), DISPONIBILITA);
    }

    /**
     * Create an aliased <code>Disponibilita</code> table reference
     */
    public Disponibilita(Name alias) {
        this(alias, DISPONIBILITA);
    }

    /**
     * Create a <code>Disponibilita</code> table reference
     */
    public Disponibilita() {
        this(DSL.name("Disponibilita"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<DisponibilitaRecord, Integer> getIdentity() {
        return (Identity<DisponibilitaRecord, Integer>) super.getIdentity();
    }

    @Override
    public Disponibilita as(String alias) {
        return new Disponibilita(DSL.name(alias), this);
    }

    @Override
    public Disponibilita as(Name alias) {
        return new Disponibilita(alias, this);
    }

    @Override
    public Disponibilita as(Table<?> alias) {
        return new Disponibilita(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Disponibilita rename(String name) {
        return new Disponibilita(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Disponibilita rename(Name name) {
        return new Disponibilita(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Disponibilita rename(Table<?> name) {
        return new Disponibilita(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Disponibilita where(Condition condition) {
        return new Disponibilita(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Disponibilita where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Disponibilita where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Disponibilita where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Disponibilita where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Disponibilita where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Disponibilita where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Disponibilita where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Disponibilita whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Disponibilita whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
