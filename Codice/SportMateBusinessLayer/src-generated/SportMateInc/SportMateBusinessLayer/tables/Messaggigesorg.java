/*
 * This file is generated by jOOQ.
 */
package SportMateInc.SportMateBusinessLayer.tables;


import SportMateInc.SportMateBusinessLayer.DefaultSchema;
import SportMateInc.SportMateBusinessLayer.tables.records.MessaggigesorgRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Messaggigesorg extends TableImpl<MessaggigesorgRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>MessaggiGesOrg</code>
     */
    public static final Messaggigesorg MESSAGGIGESORG = new Messaggigesorg();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MessaggigesorgRecord> getRecordType() {
        return MessaggigesorgRecord.class;
    }

    /**
     * The column <code>MessaggiGesOrg.idMessaggio</code>.
     */
    public final TableField<MessaggigesorgRecord, Integer> IDMESSAGGIO = createField(DSL.name("idMessaggio"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>MessaggiGesOrg.stato</code>.
     */
    public final TableField<MessaggigesorgRecord, Integer> STATO = createField(DSL.name("stato"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>MessaggiGesOrg.testo</code>.
     */
    public final TableField<MessaggigesorgRecord, String> TESTO = createField(DSL.name("testo"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>MessaggiGesOrg.dataOra</code>.
     */
    public final TableField<MessaggigesorgRecord, String> DATAORA = createField(DSL.name("dataOra"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>MessaggiGesOrg.idGestore</code>.
     */
    public final TableField<MessaggigesorgRecord, Integer> IDGESTORE = createField(DSL.name("idGestore"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>MessaggiGesOrg.idOrganizzatore</code>.
     */
    public final TableField<MessaggigesorgRecord, Integer> IDORGANIZZATORE = createField(DSL.name("idOrganizzatore"), SQLDataType.INTEGER.nullable(false), this, "");

    private Messaggigesorg(Name alias, Table<MessaggigesorgRecord> aliased) {
        this(alias, aliased, null);
    }

    private Messaggigesorg(Name alias, Table<MessaggigesorgRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>MessaggiGesOrg</code> table reference
     */
    public Messaggigesorg(String alias) {
        this(DSL.name(alias), MESSAGGIGESORG);
    }

    /**
     * Create an aliased <code>MessaggiGesOrg</code> table reference
     */
    public Messaggigesorg(Name alias) {
        this(alias, MESSAGGIGESORG);
    }

    /**
     * Create a <code>MessaggiGesOrg</code> table reference
     */
    public Messaggigesorg() {
        this(DSL.name("MessaggiGesOrg"), null);
    }

    public <O extends Record> Messaggigesorg(Table<O> child, ForeignKey<O, MessaggigesorgRecord> key) {
        super(child, key, MESSAGGIGESORG);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Messaggigesorg as(String alias) {
        return new Messaggigesorg(DSL.name(alias), this);
    }

    @Override
    public Messaggigesorg as(Name alias) {
        return new Messaggigesorg(alias, this);
    }

    @Override
    public Messaggigesorg as(Table<?> alias) {
        return new Messaggigesorg(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Messaggigesorg rename(String name) {
        return new Messaggigesorg(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Messaggigesorg rename(Name name) {
        return new Messaggigesorg(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Messaggigesorg rename(Table<?> name) {
        return new Messaggigesorg(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Integer, String, String, Integer, Integer> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Integer, ? super Integer, ? super String, ? super String, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Integer, ? super Integer, ? super String, ? super String, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
