/*
 * This file is generated by jOOQ.
 */
package SportMateInc.SportMateBusinessLayer.tables;


import SportMateInc.SportMateBusinessLayer.DefaultSchema;
import SportMateInc.SportMateBusinessLayer.tables.records.CentrisportiviRecord;

import java.math.BigDecimal;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Centrisportivi extends TableImpl<CentrisportiviRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>Centrisportivi</code>
     */
    public static final Centrisportivi CENTRISPORTIVI = new CentrisportiviRecord();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CentrisportiviRecord> getRecordType() {
        return CentrisportiviRecord.class;
    }

    /**
     * The column <code>Centrisportivi.idCentro</code>.
     */
    public final TableField<CentrisportiviRecord, Integer> IDCENTRO = createField(DSL.name("idCentro"), SQLDataType.INTEGER.identity(true), this, "");

    /**
     * The column <code>Centrisportivi.nomeCommerciale</code>.
     */
    public final TableField<CentrisportiviRecord, String> NOMECOMMERCIALE = createField(DSL.name("nomeCommerciale"), SQLDataType.CLOB.nullable(false), this, "");
    
    /**
     * The column <code>Centrisportivi.indirizzo</code>.
     */
    public final TableField<CentrisportiviRecord, String> INDIRIZZO = createField(DSL.name("nomeCommerciale"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>Centrisportivi.latitudine</code>.
     */
    public final TableField<CentrisportiviRecord, BigDecimal> LATITUDINE = createField(DSL.name("latitudine"), SQLDataType.NUMERIC.nullable(false), this, "");
    
    /**
     * The column <code>Centrisportivi.longitudine</code>.
     */
    public final TableField<CentrisportiviRecord, BigDecimal> LONGITUDINE = createField(DSL.name("longitudine"), SQLDataType.NUMERIC.nullable(false), this, "");
    
    /**
     * The column <code>Centrisportivi.credito</code>.
     */
    public final TableField<CentrisportiviRecord, BigDecimal> CREDITO = createField(DSL.name("credito"), SQLDataType.NUMERIC.nullable(false), this, "");
    
    /**
     * The column <code>Centrisportivi.orarioApertura</code>.
     */
    public final TableField<CentrisportiviRecord, String> ORARIOAPERTURA = createField(DSL.name("orarioApertura"),SQLDataType.CLOB.nullable(false), this, "");
    
    /**
     * The column <code>Centrisportivi.orarioChiusura</code>.
     */
    public final TableField<CentrisportiviRecord, String> ORARIOCHIUSURA = createField(DSL.name("orarioChiusura"),SQLDataType.CLOB.nullable(false), this, "");
    
    /**
     * The column <code>MessaggiGesOrg.idGestore</code>.
     */
    public final TableField<CentrisportiviRecord, Integer> IDGESTORE = createField(DSL.name("idGestore"), SQLDataType.INTEGER.nullable(false), this, "");
    
    private Centrisportivi(Name alias, Table<CentrisportiviRecord> aliased) {
        this(alias, aliased, null);
    }

    private Centrisportivi(Name alias, Table<CentrisportiviRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>CentriSportivi</code> table reference
     */
    public Centrisportivi(String alias) {
        this(DSL.name(alias), CENTRISPORTIVI);
    }

    /**
     * Create an aliased <code>CentriSportivi</code> table reference
     */
    public Centrisportivi(Name alias) {
        this(alias, CENTRISPORTIVI);
    }

    /**
     * Create a <code>CentriSportivi</code> table reference
     */
    
    public Centrisportivi() {
        this(DSL.name("CentriSportivi"), null);
    }

    public <O extends Record> Centrisportivi(Table<O> child, ForeignKey<O, CentrisportiviRecord> key) {
        super(child, key, CENTRISPORTIVI);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Centrisportivi as(String alias) {
        return new Centrisportivi(DSL.name(alias), this);
    }

    @Override
    public Centrisportivi as(Name alias) {
        return new Centrisportivi(alias, this);
    }

    @Override
    public Centrisportivi as(Table<?> alias) {
        return new Centrisportivi(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Centrisportivi rename(String name) {
        return new Centrisportivi(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Centrisportivi rename(Name name) {
        return new Centrisportivi(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Centrisportivi rename(Table<?> name) {
        return new Centrisportivi(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, String, String, BigDecimal, BigDecimal, BigDecimal, String, String, Integer> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super Integer, ? super String, ? super String, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super String, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super Integer, ? super String, ? super String, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super String, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}



