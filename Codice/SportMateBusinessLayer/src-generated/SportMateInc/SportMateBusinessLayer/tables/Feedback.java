/*
 * This file is generated by jOOQ.
 */
package SportMateInc.SportMateBusinessLayer.tables;


import SportMateInc.SportMateBusinessLayer.DefaultSchema;
import SportMateInc.SportMateBusinessLayer.tables.records.FeedbackRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Feedback extends TableImpl<FeedbackRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>Feedback</code>
     */
    public static final Feedback FEEDBACK = new Feedback();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FeedbackRecord> getRecordType() {
        return FeedbackRecord.class;
    }

    /**
     * The column <code>Feedback.idFeedback</code>.
     */
    public final TableField<FeedbackRecord, Integer> IDFEEDBACK = createField(DSL.name("idFeedback"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>Feedback.oggetto</code>.
     */
    public final TableField<FeedbackRecord, String> OGGETTO = createField(DSL.name("oggetto"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>Feedback.testo</code>.
     */
    public final TableField<FeedbackRecord, String> TESTO = createField(DSL.name("testo"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>Feedback.numLike</code>.
     */
    public final TableField<FeedbackRecord, Integer> NUMLIKE = createField(DSL.name("numLike"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Feedback.idUtente</code>.
     */
    public final TableField<FeedbackRecord, Integer> IDUTENTE = createField(DSL.name("idUtente"), SQLDataType.INTEGER.nullable(false), this, "");

    private Feedback(Name alias, Table<FeedbackRecord> aliased) {
        this(alias, aliased, null);
    }

    private Feedback(Name alias, Table<FeedbackRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>Feedback</code> table reference
     */
    public Feedback(String alias) {
        this(DSL.name(alias), FEEDBACK);
    }

    /**
     * Create an aliased <code>Feedback</code> table reference
     */
    public Feedback(Name alias) {
        this(alias, FEEDBACK);
    }

    /**
     * Create a <code>Feedback</code> table reference
     */
    public Feedback() {
        this(DSL.name("Feedback"), null);
    }

    public <O extends Record> Feedback(Table<O> child, ForeignKey<O, FeedbackRecord> key) {
        super(child, key, FEEDBACK);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Feedback as(String alias) {
        return new Feedback(DSL.name(alias), this);
    }

    @Override
    public Feedback as(Name alias) {
        return new Feedback(alias, this);
    }

    @Override
    public Feedback as(Table<?> alias) {
        return new Feedback(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Feedback rename(String name) {
        return new Feedback(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Feedback rename(Name name) {
        return new Feedback(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Feedback rename(Table<?> name) {
        return new Feedback(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, Integer, Integer> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Integer, ? super String, ? super String, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Integer, ? super String, ? super String, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
