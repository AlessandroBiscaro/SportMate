/*
 * This file is generated by jOOQ.
 */
package SportMateInc.SportMateBusinessLayer.tables;


import SportMateInc.SportMateBusinessLayer.DefaultSchema;
import SportMateInc.SportMateBusinessLayer.tables.records.ServiziaggiuntiviRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Serviziaggiuntivi extends TableImpl<ServiziaggiuntiviRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ServiziAggiuntivi</code>
     */
    public static final Serviziaggiuntivi SERVIZIAGGIUNTIVI = new Serviziaggiuntivi();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ServiziaggiuntiviRecord> getRecordType() {
        return ServiziaggiuntiviRecord.class;
    }

    /**
     * The column <code>ServiziAggiuntivi.idServizio</code>.
     */
    public final TableField<ServiziaggiuntiviRecord, Integer> IDSERVIZIO = createField(DSL.name("idServizio"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>ServiziAggiuntivi.nomeServizio</code>.
     */
    public final TableField<ServiziaggiuntiviRecord, String> NOMESERVIZIO = createField(DSL.name("nomeServizio"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>ServiziAggiuntivi.descrizione</code>.
     */
    public final TableField<ServiziaggiuntiviRecord, String> DESCRIZIONE = createField(DSL.name("descrizione"), SQLDataType.CLOB.nullable(false), this, "");

    private Serviziaggiuntivi(Name alias, Table<ServiziaggiuntiviRecord> aliased) {
        this(alias, aliased, null);
    }

    private Serviziaggiuntivi(Name alias, Table<ServiziaggiuntiviRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>ServiziAggiuntivi</code> table reference
     */
    public Serviziaggiuntivi(String alias) {
        this(DSL.name(alias), SERVIZIAGGIUNTIVI);
    }

    /**
     * Create an aliased <code>ServiziAggiuntivi</code> table reference
     */
    public Serviziaggiuntivi(Name alias) {
        this(alias, SERVIZIAGGIUNTIVI);
    }

    /**
     * Create a <code>ServiziAggiuntivi</code> table reference
     */
    public Serviziaggiuntivi() {
        this(DSL.name("ServiziAggiuntivi"), null);
    }

    public <O extends Record> Serviziaggiuntivi(Table<O> child, ForeignKey<O, ServiziaggiuntiviRecord> key) {
        super(child, key, SERVIZIAGGIUNTIVI);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Serviziaggiuntivi as(String alias) {
        return new Serviziaggiuntivi(DSL.name(alias), this);
    }

    @Override
    public Serviziaggiuntivi as(Name alias) {
        return new Serviziaggiuntivi(alias, this);
    }

    @Override
    public Serviziaggiuntivi as(Table<?> alias) {
        return new Serviziaggiuntivi(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Serviziaggiuntivi rename(String name) {
        return new Serviziaggiuntivi(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Serviziaggiuntivi rename(Name name) {
        return new Serviziaggiuntivi(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Serviziaggiuntivi rename(Table<?> name) {
        return new Serviziaggiuntivi(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Integer, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Integer, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
