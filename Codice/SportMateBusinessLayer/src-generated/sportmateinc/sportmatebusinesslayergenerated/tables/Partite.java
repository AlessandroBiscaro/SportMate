/*
 * This file is generated by jOOQ.
 */
package sportmateinc.sportmatebusinesslayergenerated.tables;


import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import sportmateinc.sportmatebusinesslayergenerated.DefaultSchema;
import sportmateinc.sportmatebusinesslayergenerated.tables.records.PartiteRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Partite extends TableImpl<PartiteRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>Partite</code>
     */
    public static final Partite PARTITE = new Partite();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PartiteRecord> getRecordType() {
        return PartiteRecord.class;
    }

    /**
     * The column <code>Partite.idPartita</code>.
     */
    public final TableField<PartiteRecord, Integer> IDPARTITA = createField(DSL.name("idPartita"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>Partite.postiTotali</code>.
     */
    public final TableField<PartiteRecord, Integer> POSTITOTALI = createField(DSL.name("postiTotali"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>Partite.pubblica</code>.
     */
    public final TableField<PartiteRecord, Integer> PUBBLICA = createField(DSL.name("pubblica"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Partite.stato</code>.
     */
    public final TableField<PartiteRecord, Integer> STATO = createField(DSL.name("stato"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Partite.modPagamento</code>.
     */
    public final TableField<PartiteRecord, String> MODPAGAMENTO = createField(DSL.name("modPagamento"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>Partite.idOrganizzatore</code>.
     */
    public final TableField<PartiteRecord, Integer> IDORGANIZZATORE = createField(DSL.name("idOrganizzatore"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Partite.idDisponibilita</code>.
     */
    public final TableField<PartiteRecord, Integer> IDDISPONIBILITA = createField(DSL.name("idDisponibilita"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Partite.goalSquadraCasa</code>.
     */
    public final TableField<PartiteRecord, Integer> GOALSQUADRACASA = createField(DSL.name("goalSquadraCasa"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>Partite.goalSquadraTrasferta</code>.
     */
    public final TableField<PartiteRecord, Integer> GOALSQUADRATRASFERTA = createField(DSL.name("goalSquadraTrasferta"), SQLDataType.INTEGER, this, "");

    private Partite(Name alias, Table<PartiteRecord> aliased) {
        this(alias, aliased, null);
    }

    private Partite(Name alias, Table<PartiteRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>Partite</code> table reference
     */
    public Partite(String alias) {
        this(DSL.name(alias), PARTITE);
    }

    /**
     * Create an aliased <code>Partite</code> table reference
     */
    public Partite(Name alias) {
        this(alias, PARTITE);
    }

    /**
     * Create a <code>Partite</code> table reference
     */
    public Partite() {
        this(DSL.name("Partite"), null);
    }

    public <O extends Record> Partite(Table<O> child, ForeignKey<O, PartiteRecord> key) {
        super(child, key, PARTITE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Partite as(String alias) {
        return new Partite(DSL.name(alias), this);
    }

    @Override
    public Partite as(Name alias) {
        return new Partite(alias, this);
    }

    @Override
    public Partite as(Table<?> alias) {
        return new Partite(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Partite rename(String name) {
        return new Partite(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Partite rename(Name name) {
        return new Partite(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Partite rename(Table<?> name) {
        return new Partite(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, Integer, Integer, Integer, String, Integer, Integer, Integer, Integer> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super String, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super String, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
