/*
 * This file is generated by jOOQ.
 */
package sportmateinc.sportmatebusinesslayergenerated.tables;


import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import sportmateinc.sportmatebusinesslayergenerated.DefaultSchema;
import sportmateinc.sportmatebusinesslayergenerated.tables.records.DettaglioservizicentriRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Dettaglioservizicentri extends TableImpl<DettaglioservizicentriRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>DettaglioServiziCentri</code>
     */
    public static final Dettaglioservizicentri DETTAGLIOSERVIZICENTRI = new Dettaglioservizicentri();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DettaglioservizicentriRecord> getRecordType() {
        return DettaglioservizicentriRecord.class;
    }

    /**
     * The column <code>DettaglioServiziCentri.idServizio</code>.
     */
    public final TableField<DettaglioservizicentriRecord, Integer> IDSERVIZIO = createField(DSL.name("idServizio"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>DettaglioServiziCentri.idCentro</code>.
     */
    public final TableField<DettaglioservizicentriRecord, Integer> IDCENTRO = createField(DSL.name("idCentro"), SQLDataType.INTEGER, this, "");

    private Dettaglioservizicentri(Name alias, Table<DettaglioservizicentriRecord> aliased) {
        this(alias, aliased, null);
    }

    private Dettaglioservizicentri(Name alias, Table<DettaglioservizicentriRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>DettaglioServiziCentri</code> table reference
     */
    public Dettaglioservizicentri(String alias) {
        this(DSL.name(alias), DETTAGLIOSERVIZICENTRI);
    }

    /**
     * Create an aliased <code>DettaglioServiziCentri</code> table reference
     */
    public Dettaglioservizicentri(Name alias) {
        this(alias, DETTAGLIOSERVIZICENTRI);
    }

    /**
     * Create a <code>DettaglioServiziCentri</code> table reference
     */
    public Dettaglioservizicentri() {
        this(DSL.name("DettaglioServiziCentri"), null);
    }

    public <O extends Record> Dettaglioservizicentri(Table<O> child, ForeignKey<O, DettaglioservizicentriRecord> key) {
        super(child, key, DETTAGLIOSERVIZICENTRI);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Dettaglioservizicentri as(String alias) {
        return new Dettaglioservizicentri(DSL.name(alias), this);
    }

    @Override
    public Dettaglioservizicentri as(Name alias) {
        return new Dettaglioservizicentri(alias, this);
    }

    @Override
    public Dettaglioservizicentri as(Table<?> alias) {
        return new Dettaglioservizicentri(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Dettaglioservizicentri rename(String name) {
        return new Dettaglioservizicentri(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Dettaglioservizicentri rename(Name name) {
        return new Dettaglioservizicentri(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Dettaglioservizicentri rename(Table<?> name) {
        return new Dettaglioservizicentri(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
