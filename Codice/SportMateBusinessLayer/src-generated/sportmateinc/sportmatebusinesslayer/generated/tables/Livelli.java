/*
 * This file is generated by jOOQ.
 */
package sportmateinc.sportmatebusinesslayer.generated.tables;



import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import sportmateinc.sportmatebusinesslayer.generated.DefaultSchema;
import sportmateinc.sportmatebusinesslayer.generated.tables.records.LivelliRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Livelli extends TableImpl<LivelliRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>Livelli</code>
     */
    public static final Livelli LIVELLI = new Livelli();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LivelliRecord> getRecordType() {
        return LivelliRecord.class;
    }

    /**
     * The column <code>Livelli.idLivello</code>.
     */
    public final TableField<LivelliRecord, Integer> IDLIVELLO = createField(DSL.name("idLivello"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("1"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>Livelli.nomeLivello</code>.
     */
    public final TableField<LivelliRecord, String> NOMELIVELLO = createField(DSL.name("nomeLivello"), SQLDataType.CLOB.nullable(false).defaultValue(DSL.field(DSL.raw("'Principiante'"), SQLDataType.CLOB)), this, "");

    private Livelli(Name alias, Table<LivelliRecord> aliased) {
        this(alias, aliased, null);
    }

    private Livelli(Name alias, Table<LivelliRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>Livelli</code> table reference
     */
    public Livelli(String alias) {
        this(DSL.name(alias), LIVELLI);
    }

    /**
     * Create an aliased <code>Livelli</code> table reference
     */
    public Livelli(Name alias) {
        this(alias, LIVELLI);
    }

    /**
     * Create a <code>Livelli</code> table reference
     */
    public Livelli() {
        this(DSL.name("Livelli"), null);
    }

    public <O extends Record> Livelli(Table<O> child, ForeignKey<O, LivelliRecord> key) {
        super(child, key, LIVELLI);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Livelli as(String alias) {
        return new Livelli(DSL.name(alias), this);
    }

    @Override
    public Livelli as(Name alias) {
        return new Livelli(alias, this);
    }

    @Override
    public Livelli as(Table<?> alias) {
        return new Livelli(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Livelli rename(String name) {
        return new Livelli(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Livelli rename(Name name) {
        return new Livelli(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Livelli rename(Table<?> name) {
        return new Livelli(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super Integer, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super Integer, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
